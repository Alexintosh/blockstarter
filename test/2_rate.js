// Generated by LiveScript 1.5.0
(function(){
  var expect, main, big, p, moment, allCoins, slice$ = [].slice;
  expect = require('expect');
  main = require('../main/main.js');
  big = require('big.js');
  p = require('prelude-ls');
  moment = require('moment');
  allCoins = ['eth', 'btc', 'ltc'];
  describe('Rate', function(run){
    var _, d;
    _ = JSON.stringify;
    d = function(date){
      return moment(date, "YYYY-MM-DD HH:mm").toDate().getTime() / 1000;
    };
    it('rate-history-0', function(done){
      this.timeout(25000);
      return main.rateHistory(d("2017-05-28 4:30"), function(err, result){
        expect(_(result)).toBe(_({
          ETH: {
            BTC: '0.07846300',
            CHF: '167.00000000'
          }
        }));
        done();
      });
    });
    it('rate-history-1', function(done){
      this.timeout(15000);
      return main.rateHistory(d("2017-05-30 4:30"), function(err, result){
        expect(_(result)).toBe(_({
          ETH: {
            BTC: '0.08900010',
            CHF: '199.50000001'
          }
        }));
        done();
      });
    });
    it('rate-history-2', function(done){
      this.timeout(15000);
      return main.rateHistory(d("2017-06-01 4:30"), function(err, result){
        expect(_(result)).toBe(_({
          ETH: {
            BTC: '0.09699600',
            CHF: '219.46044850'
          }
        }));
        done();
      });
    });
    it('rate-history-3', function(done){
      this.timeout(15000);
      return main.rateHistory(d("2017-06-01 22:30"), function(err, result){
        expect(_(result)).toBe(_({
          ETH: {
            BTC: '0.09276898',
            CHF: '211.50000000'
          }
        }));
        done();
      });
    });
    it('rate-history-3-duplicate', function(done){
      this.timeout(15000);
      return main.rateHistory(d("2017-06-01 22:30"), function(err, result){
        expect(_(result)).toBe(_({
          ETH: {
            BTC: '0.09276898',
            CHF: '211.50000000'
          }
        }));
        done();
      });
    });
    it('rate-history-4', function(done){
      this.timeout(8000);
      return main.rateHistory(d("2017-06-01 23:30"), function(err, result){
        expect(_(result)).toBe(_({
          ETH: {
            BTC: '0.09198971',
            CHF: '211.30000058'
          }
        }));
        done();
      });
    });
    it('rate-history-4-duplicate', function(done){
      this.timeout(8000);
      return main.rateHistory(d("2017-06-01 23:30"), function(err, result){
        expect(_(result)).toBe(_({
          ETH: {
            BTC: '0.09198971',
            CHF: '211.30000058'
          }
        }));
        done();
      });
    });
    it('rate-history-smarter-1', function(done){
      var run;
      this.timeout(8000);
      run = function(count, date, cb){
        return main.rateHistory.smarter(d("2017-06-01 23:30"), function(err, result){
          var nextCount;
          expect(_(result)).toBe(_({
            ETH: {
              BTC: '0.09198971',
              CHF: '211.30000058'
            }
          }));
          nextCount = count - 1;
          if (nextCount === 0) {
            return cb(err, result);
          }
          run(nextCount, date, function(err, nextResult){
            expect(_(result)).toBe(_(nextResult));
            cb(err, result);
          });
        });
      };
      return run(50, function(err, result){
        done();
      });
    });
    it('rates-cryptocompare', function(done){
      var coins, checkRate, checkRates;
      this.timeout(5000);
      coins = allCoins;
      checkRate = function(coin, cb){
        var provider;
        provider = main.rate[coin];
        return provider(function(err, rate){
          expect(err).toBe(null);
          expect(rate).toBeA('number');
          cb(null, rate);
        });
      };
      checkRates = function(arg$, cb){
        var head, tail;
        head = arg$[0], tail = slice$.call(arg$, 1);
        if (head == null) {
          return cb(null);
        }
        return checkRate(head, function(err){
          expect(err).toBe(null);
          checkRates(tail, cb);
        });
      };
      return checkRates(coins, done);
    });
  });
}).call(this);
