// Generated by LiveScript 1.5.0
(function(){
  var request, rateCache, moment, p, iserror, buildUrl, url, getRates, cache, getRatesSmarter;
  request = require('request');
  rateCache = require('./rate-cache.js');
  moment = require('moment');
  p = require('prelude-ls');
  iserror = require('../iserror.js')('https://poloniex.com');
  buildUrl = curry$(function(pair, end){
    return "https://poloniex.com/public?command=returnTradeHistory&currencyPair=" + pair + "&end=" + end;
  });
  url = {
    btc_eth: buildUrl('BTC_ETH'),
    usdt_eth: buildUrl('USDT_ETH'),
    usdt_btc: buildUrl('USDT_BTC')
  };
  getRates = function(ts, cb){
    var extractVal, getVal;
    extractVal = function(arr){
      var this$ = this;
      return function(it){
        return it != null ? it.rate : void 8;
      }(
      p.head(
      p.reverse(
      p.sortBy(function(it){
        return it.globalTradeID;
      })(
      p.filter(function(it){
        return it.type === 'sell';
      })(
      arr)))));
    };
    getVal = compose$(JSON.parse, extractVal);
    return request(url.btc_eth(ts), function(err, response, body){
      var btc_eth;
      if (err != null) {
        return cb(err);
      }
      btc_eth = getVal(body);
      request(url.usdt_eth(ts), function(err, response, body){
        var usdt_eth;
        if (err != null) {
          return cb(err);
        }
        usdt_eth = getVal(body);
        request(url.usdt_btc(ts), function(err, response, body){
          var usdt_btc, model;
          if (err != null) {
            return cb(err);
          }
          usdt_btc = getVal(body);
          model = {
            ETH: {
              BTC: btc_eth,
              CHF: usdt_eth
            }
          };
          cb(err, model);
        });
      });
    });
  };
  cache = {};
  getRatesSmarter = curry$(function(trials, ts, cb){
    if (cache[ts] != null) {
      return cb(null, cache[ts]);
    }
    return getRates(ts, function(err, rates){
      var nextTrials;
      if (err == null) {
        cache[ts] = rates;
        return cb(null, rates);
      }
      if (trials === 0) {
        return cb(err);
      }
      nextTrials = trials - 1;
      getRatesSmarter(nextTrials, ts, cb);
    });
  });
  getRates.smarter = getRatesSmarter(10);
  module.exports = getRates;
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
  function compose$() {
    var functions = arguments;
    return function() {
      var i, result;
      result = functions[0].apply(this, arguments);
      for (i = 1; i < functions.length; ++i) {
        result = functions[i](result);
      }
      return result;
    };
  }
}).call(this);
